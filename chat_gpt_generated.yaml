---
# This is a comment at the beginning of the playbook file
# It helps provide context or information about the playbook

# Define the name of the playbook
- name: Example Playbook
  # The 'hosts' section specifies the target hosts or groups of hosts
  hosts: web_servers
  # 'become' option is used to execute tasks with elevated privileges (sudo)
  become: yes
  # 'become_user' specifies the user to become when executing tasks
  become_user: root

  # Define variables that can be used throughout the playbook
vars:
  website_directory: /var/www/html/mywebsite
  local_html_file: /path/to/local/index.html
  list_example: [1,2,3,10]
  i_int: 12
  j_int: 13
  s_str: "AHOJ"
  
  # Define a list of tasks to be executed on the target hosts
  tasks:

# Task 0: Define a variable
    - name: Define a custom fact
      # Use the 'set_fact' module to define a variable named 'my_var'
      set_fact:
        my_var: "Hello, Ansible!"

######################### REGISTER ####################################
    # Task 1: Ensure that the Apache web server is installed
    - name: Install Apache
      # 'apt' module is used for package management on Debian-based systems
      apt:
        name: apache2
        state: present
      # 'register' saves the task result to a variable for later use
      register: apache_installed

    # Task 2: Ensure Apache service is running and enabled
    - name: Start Apache and enable at boot
      # 'service' module is used to manage services
      service:
        name: apache2
        state: started
        enabled: yes
      # 'when' conditionally runs this task if Apache was installed in Task 1
      when: apache_installed.changed

      # The Ansible failed_when and changed_when Statements 
      # Ansible failed_when and changed_when statements are similar to ansible when statement.  
      # The only difference is that It will mark the task as failed or Success[changed], when the condition defined, is met or satisfied.
      # The primary purpose of the failed_when and changed_when statements are to determine whether the task is actually successful or failure
#############################################################

    # Task 3: Create a website directory
    - name: Create web directory
      # 'file' module is used for file and directory operations
      file:
        path: /var/www/html/mywebsite
        state: directory
        mode: '0755'

    # Task 4: Copy a local HTML file to the web directory
    - name: Copy HTML file
      # 'copy' module is used to copy files from the controller to the target hosts
      copy:
        src: /path/to/local/index.html
        dest: /var/www/html/mywebsite/index.html

    # Task 5: Ensure the index.html file has the correct permissions
    - name: Set permissions on index.html
      file:
        path: /var/www/html/mywebsite/index.html
        mode: '0644'
        
########################### HANDLER #######################################

    # Task 6: Configure the Apache virtual host
    - name: Configure Apache virtual host
      # 'template' module is used to create configuration files from templates
      template:
        src: templates/vhost.conf.j2
        dest: /etc/apache2/sites-available/mywebsite.conf
      # 'notify' triggers the 'Reload Apache' handler when this task changes
      notify: Reload Apache

  # Handlers are tasks that are only executed if notified by other tasks
  handlers:
    # Handler 1: Reload the Apache service
    - name: Reload Apache
      # 'service' module is used to reload the Apache service
      service:
        name: apache2
        state: reloaded

######################### DEBUG #########################################
   
  # Task 7: Debug multiple variables
    - name: Debug multiple variables
      # Use the 'debug' module to display values of multiple variables
      debug:
        var: 
          - my_var
          - ansible_hostname  # Display the hostname of the target host
          - ansible_distribution  # Display the Linux distribution of the target host

    # Task 8: Debug with custom messages
    - name: Debug with custom messages
      # Use the 'debug' module to display custom messages along with variable values
      debug:
        msg: "The value of my_var is: {{ my_var }}"


######################## LOOPS #####################################
  # Define a list of users to create
  vars:
    user_list:
      - alice
      - bob
      - charlie

  # Define a list of tasks to be executed on the target hosts
  tasks:
    # Task: Create users using a loop
    - name: Create Users
      # Use the 'user' module to create users
      user:
        name: "{{ item }}"
        state: present
      # Use the 'loop' keyword to iterate over the 'user_list' variable
      loop: "{{ user_list }}"

### WITH_ITEM LOOP

 # Define a list of directories to create
  vars:
    directory_list:
      - /tmp/dir1
      - /tmp/dir2
      - /tmp/dir3

  # Define a list of tasks to be executed on the target hosts
  tasks:
    # Task: Create directories using 'with_items'
    - name: Create Directories
      # Use the 'file' module to create directories
      file:
        path: "{{ item }}"
        state: directory
      # Use 'with_items' to iterate over the 'directory_list' variable
      with_items: "{{ directory_list }}"

### MULTIPLE WITH_ITEMS LOOP

# Define the name of the playbook
- name: Install Packages Example Playbook
  # The 'hosts' section specifies the target hosts or groups of hosts
  hosts: localhost
  # No need for privilege escalation with 'become' in this example

  # Define a list of packages and their states
  vars:
    packages:
      - { name: nginx, state: present }
      - { name: apache2, state: present }
      - { name: postgresql, state: present }
      - { name: openssh-server, state: absent }  # Remove openssh-server

  # Define a list of tasks to be executed on the target hosts
  tasks:
    # Task: Install or remove packages using 'with_items'
    - name: Install or Remove Packages
      # Use the 'apt' module to install or remove packages based on the values in the 'packages' list
      apt:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
      # Use 'with_items' to iterate over the 'packages' list, which contains dictionaries
      with_items: "{{ packages }}"

### WITH_TOGETHER loop

  vars:
    alpha: [ 'a', 'b', 'c', 'd' ]
    numbers:  [ 1, 2, 3, 4 ]

    - name: Loop Over Set of Collection variable
      debug:
        msg: "{{ item.0 }} and {{ item.1 }}"
      with_together:
        - "{{ alpha }}"
        - "{{ numbers }}"

### another examples of loops
 vars:
    alpha: [ 'a', 'b', 'c', 'd' ]
    numbers:  [ 1, 2, 3, 4 ]

  tasks:
    # Add Multiple User's in one go (print olny one !!!)
    - name : Random Looping Example
      debug:
        msg: "{{ item }}"
      with_random_choice:
        - "go through the door"
        - "drink from the goblet"
        - "press the red button"
        - "do nothing"
    
    # Looping Over A List With An Index (print potition and value)
    - name: Looping over a List
      debug:
        msg: "At array position {{ item.0 }} there is a value {{ item.1 }}"
      with_indexed_items:
        - "{{ alpha }}"

    # Do Until Loop
    - name: Ensure Apache is Running
      service:
        name: httpd
        state: started
      register: result
      until: result.changed == True
      retries: 10
      delay: 4

###################################################
